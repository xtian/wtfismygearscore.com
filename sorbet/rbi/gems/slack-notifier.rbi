# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: strong
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/slack-notifier/all/slack-notifier.rbi
#
# slack-notifier-2.3.2
module Slack
end
class Slack::Notifier
  def config; end
  def endpoint; end
  def initialize(webhook_url, options = nil, &block); end
  def middleware; end
  def ping(message, options = nil); end
  def post(payload = nil); end
end
class Slack::Notifier::APIError < StandardError
end
module Slack::Notifier::Util
end
class Slack::Notifier::Util::HTTPClient
  def call; end
  def http_obj; end
  def http_options; end
  def initialize(uri, params); end
  def params; end
  def request_obj; end
  def self.post(uri, params); end
  def uri; end
end
class Slack::Notifier::Util::LinkFormatter
  def formats; end
  def formatted; end
  def initialize(string, formats: nil); end
  def self.format(string, opts = nil); end
  def slack_link(link, text = nil); end
  def sub_html_links(string); end
  def sub_markdown_links(string); end
end
module Slack::Notifier::Util::Escape
  def self.html(string); end
end
class Slack::Notifier::PayloadMiddleware
  def self.register(middleware, name); end
  def self.registry; end
end
class Slack::Notifier::PayloadMiddleware::Stack
  def as_array(args); end
  def call(payload = nil); end
  def initialize(notifier); end
  def notifier; end
  def set(*middlewares); end
  def stack; end
end
class Slack::Notifier::PayloadMiddleware::Base
  def call(_payload = nil); end
  def initialize(notifier, opts = nil); end
  def notifier; end
  def options; end
  def self.default_opts; end
  def self.middleware_name(name); end
  def self.options(default_opts); end
end
class Slack::Notifier::PayloadMiddleware::FormatMessage < Slack::Notifier::PayloadMiddleware::Base
  def call(payload = nil); end
end
class Slack::Notifier::PayloadMiddleware::FormatAttachments < Slack::Notifier::PayloadMiddleware::Base
  def call(payload = nil); end
  def wrap_array(object); end
end
class Slack::Notifier::PayloadMiddleware::At < Slack::Notifier::PayloadMiddleware::Base
  def at_cmd_char(at); end
  def call(payload = nil); end
  def format_ats(ats); end
end
class Slack::Notifier::PayloadMiddleware::Channels < Slack::Notifier::PayloadMiddleware::Base
  def call(payload = nil); end
end
class Slack::Notifier::Config
  def defaults(new_defaults = nil); end
  def http_client(client = nil); end
  def initialize; end
  def middleware(*args); end
end
