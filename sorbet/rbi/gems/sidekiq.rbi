# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: true
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/sidekiq/all/sidekiq.rbi
#
# sidekiq-5.2.7
module Sidekiq
  def self.average_scheduled_poll_interval=(interval); end
  def self.client_middleware; end
  def self.configure_client; end
  def self.configure_server; end
  def self.death_handlers; end
  def self.default_retries_exhausted=(prok); end
  def self.default_server_middleware; end
  def self.default_worker_options; end
  def self.default_worker_options=(hash); end
  def self.dump_json(object); end
  def self.error_handlers; end
  def self.load_json(string); end
  def self.logger; end
  def self.logger=(log); end
  def self.on(event, &block); end
  def self.options; end
  def self.options=(opts); end
  def self.redis; end
  def self.redis=(hash); end
  def self.redis_info; end
  def self.redis_pool; end
  def self.server?; end
  def self.server_middleware; end
end
module Sidekiq::Logging
  def logger; end
  def self.initialize_logger(log_target = nil); end
  def self.job_hash_context(job_hash); end
  def self.logger; end
  def self.logger=(log); end
  def self.reopen_logs; end
  def self.tid; end
  def self.with_context(msg); end
  def self.with_job_hash_context(job_hash, &block); end
end
class Sidekiq::Logging::Pretty < Logger::Formatter
  def call(severity, time, program_name, message); end
  def context; end
end
class Sidekiq::Logging::WithoutTimestamp < Sidekiq::Logging::Pretty
  def call(severity, time, program_name, message); end
end
module Sidekiq::Middleware
end
class Sidekiq::Middleware::Chain
  def add(klass, *args); end
  def clear; end
  def each(&block); end
  def entries; end
  def exists?(klass); end
  def initialize; end
  def initialize_copy(copy); end
  def insert_after(oldklass, newklass, *args); end
  def insert_before(oldklass, newklass, *args); end
  def invoke(*args); end
  def prepend(klass, *args); end
  def remove(klass); end
  def retrieve; end
  include Enumerable
end
class Sidekiq::Middleware::Entry
  def initialize(klass, *args); end
  def klass; end
  def make_new; end
end
class Sidekiq::Client
  def atomic_push(conn, payloads); end
  def initialize(redis_pool = nil); end
  def middleware(&block); end
  def normalize_item(item); end
  def normalized_hash(item_class); end
  def process_single(worker_class, item); end
  def push(item); end
  def push_bulk(items); end
  def raw_push(payloads); end
  def redis_pool; end
  def redis_pool=(arg0); end
  def self.enqueue(klass, *args); end
  def self.enqueue_in(interval, klass, *args); end
  def self.enqueue_to(queue, klass, *args); end
  def self.enqueue_to_in(queue, interval, klass, *args); end
  def self.push(item); end
  def self.push_bulk(items); end
  def self.via(pool); end
end
module Sidekiq::Worker
  def jid; end
  def jid=(arg0); end
  def logger; end
  def self.included(base); end
end
class Sidekiq::Worker::Setter
  def initialize(klass, opts); end
  def perform_async(*args); end
  def perform_at(interval, *args); end
  def perform_in(interval, *args); end
  def set(options); end
end
module Sidekiq::Worker::ClassMethods
  def client_push(item); end
  def delay(*args); end
  def delay_for(*args); end
  def delay_until(*args); end
  def get_sidekiq_options; end
  def perform_async(*args); end
  def perform_at(interval, *args); end
  def perform_in(interval, *args); end
  def set(options); end
  def sidekiq_class_attribute(*attrs); end
  def sidekiq_options(opts = nil); end
  def sidekiq_retries_exhausted(&block); end
  def sidekiq_retry_in(&block); end
end
class Sidekiq::RedisConnection
  def self.build_client(options); end
  def self.client_opts(options); end
  def self.create(options = nil); end
  def self.determine_redis_provider; end
  def self.log_info(options); end
  def self.verify_sizing(size, concurrency); end
end
module Sidekiq::Extensions
  def self.enable_delay!; end
end
module Sidekiq::Extensions::PsychAutoload
  def resolve_class(klass_name); end
end
class Sidekiq::Rails < Rails::Engine
end
class Sidekiq::Rails::Reloader
  def call; end
  def initialize(app = nil); end
  def inspect; end
end
class Sidekiq::Shutdown < Interrupt
end
module Sidekiq::RedisScanner
  def sscan(conn, key); end
end
class Sidekiq::Stats
  def dead_size; end
  def default_queue_latency; end
  def enqueued; end
  def failed; end
  def fetch_stats!; end
  def initialize; end
  def processed; end
  def processes_size; end
  def queues; end
  def reset(*stats); end
  def retry_size; end
  def scheduled_size; end
  def stat(s); end
  def workers_size; end
  include Sidekiq::RedisScanner
end
class Sidekiq::Stats::Queues
  def lengths; end
  include Sidekiq::RedisScanner
end
class Sidekiq::Stats::History
  def date_stat_hash(stat); end
  def failed; end
  def initialize(days_previous, start_date = nil); end
  def processed; end
end
class Sidekiq::Queue
  def clear; end
  def each; end
  def find_job(jid); end
  def initialize(name = nil); end
  def latency; end
  def name; end
  def paused?; end
  def self.all; end
  def size; end
  extend Sidekiq::RedisScanner
  include Enumerable
end
class Sidekiq::Job
  def [](name); end
  def args; end
  def created_at; end
  def delete; end
  def display_args; end
  def display_class; end
  def enqueued_at; end
  def initialize(item, queue_name = nil); end
  def item; end
  def jid; end
  def klass; end
  def latency; end
  def parse(item); end
  def queue; end
  def safe_load(content, default); end
  def value; end
end
class Sidekiq::SortedEntry < Sidekiq::Job
  def add_to_queue; end
  def at; end
  def delete; end
  def error?; end
  def initialize(parent, score, item); end
  def kill; end
  def parent; end
  def remove_job; end
  def reschedule(at); end
  def retry; end
  def score; end
end
class Sidekiq::SortedSet
  def clear; end
  def initialize(name); end
  def name; end
  def size; end
  include Enumerable
end
class Sidekiq::JobSet < Sidekiq::SortedSet
  def delete(score, jid); end
  def delete_by_jid(score, jid); end
  def delete_by_value(name, value); end
  def each; end
  def fetch(score, jid = nil); end
  def find_job(jid); end
  def schedule(timestamp, message); end
end
class Sidekiq::ScheduledSet < Sidekiq::JobSet
  def initialize; end
end
class Sidekiq::RetrySet < Sidekiq::JobSet
  def initialize; end
  def kill_all; end
  def retry_all; end
end
class Sidekiq::DeadSet < Sidekiq::JobSet
  def initialize; end
  def kill(message, opts = nil); end
  def retry_all; end
  def self.max_jobs; end
  def self.timeout; end
end
class Sidekiq::ProcessSet
  def cleanup; end
  def each; end
  def initialize(clean_plz = nil); end
  def leader; end
  def size; end
  include Enumerable
  include Sidekiq::RedisScanner
end
class Sidekiq::Process
  def [](key); end
  def dump_threads; end
  def identity; end
  def initialize(hash); end
  def labels; end
  def quiet!; end
  def signal(sig); end
  def stop!; end
  def stopping?; end
  def tag; end
end
class Sidekiq::Workers
  def each; end
  def size; end
  include Enumerable
  include Sidekiq::RedisScanner
end
module Sidekiq::Paginator
  def page(key, pageidx = nil, page_size = nil, opts = nil); end
end
module Sidekiq::WebHelpers
  def add_to_head; end
  def available_locales; end
  def clear_caches; end
  def csrf_tag; end
  def current_path; end
  def current_status; end
  def delete_or_add_queue(job, params); end
  def display_args(args, truncate_after_chars = nil); end
  def display_custom_head; end
  def environment_title_prefix; end
  def filtering(*arg0); end
  def find_locale_files(lang); end
  def get_locale; end
  def h(text); end
  def job_params(job, score); end
  def locale; end
  def locale_files; end
  def namespace; end
  def number_with_delimiter(number); end
  def parse_params(params); end
  def poll_path; end
  def processes; end
  def product_version; end
  def qparams(options); end
  def redirect_with_query(url); end
  def redis_connection; end
  def redis_connection_and_namespace; end
  def redis_info; end
  def relative_time(time); end
  def retries_with_score(score); end
  def retry_extra_items(retry_job); end
  def retry_or_delete_or_kill(job, params); end
  def root_path; end
  def rtl?; end
  def server_utc_time; end
  def stats; end
  def strings(lang); end
  def t(msg, options = nil); end
  def text_direction; end
  def to_display(arg); end
  def truncate(text, truncate_after_chars = nil); end
  def unfiltered?; end
  def user_preferred_languages; end
  def workers; end
end
module Sidekiq::WebRouter
  def delete(path, &block); end
  def get(path, &block); end
  def match(env); end
  def patch(path, &block); end
  def post(path, &block); end
  def put(path, &block); end
  def route(method, path, &block); end
end
class Sidekiq::WebRoute
  def block; end
  def block=(arg0); end
  def compile; end
  def initialize(request_method, pattern, block); end
  def match(request_method, path); end
  def matcher; end
  def name; end
  def name=(arg0); end
  def pattern; end
  def pattern=(arg0); end
  def request_method; end
  def request_method=(arg0); end
end
class Sidekiq::WebAction
  def _erb(file, locals); end
  def _render; end
  def block; end
  def block=(arg0); end
  def env; end
  def env=(arg0); end
  def erb(content, options = nil); end
  def halt(res); end
  def initialize(env, block); end
  def json(payload); end
  def params; end
  def redirect(location); end
  def render(engine, content, options = nil); end
  def request; end
  def route_params; end
  def session; end
  def settings; end
  def type; end
  def type=(arg0); end
  include Sidekiq::Paginator
  include Sidekiq::WebHelpers
end
class Sidekiq::WebApplication
  def call(env); end
  def initialize(klass); end
  def self.after(path = nil, &block); end
  def self.afters; end
  def self.before(path = nil, &block); end
  def self.befores; end
  def self.helpers(mod = nil, &block); end
  def self.run_afters(app, action); end
  def self.run_befores(app, action); end
  def self.run_hooks(hooks, app, action); end
  def self.set(key, val); end
  def self.settings; end
  def self.tabs; end
  def settings; end
  extend Sidekiq::WebRouter
end
class Sidekiq::Web
  def app; end
  def build; end
  def build_sessions; end
  def call(env); end
  def disable(*opts); end
  def enable(*opts); end
  def middlewares; end
  def self.app_url; end
  def self.app_url=(arg0); end
  def self.call(env); end
  def self.custom_tabs; end
  def self.default_tabs; end
  def self.disable(*opts); end
  def self.enable(*opts); end
  def self.inherited(child); end
  def self.locales; end
  def self.locales=(arg0); end
  def self.middlewares; end
  def self.redis_pool; end
  def self.redis_pool=(arg0); end
  def self.register(extension); end
  def self.session_secret; end
  def self.session_secret=(arg0); end
  def self.sessions; end
  def self.sessions=(arg0); end
  def self.set(attribute, value); end
  def self.settings; end
  def self.tabs; end
  def self.use(*middleware_args, &block); end
  def self.views; end
  def self.views=(arg0); end
  def sessions; end
  def sessions=(arg0); end
  def set(attribute, value); end
  def settings; end
  def use(*middleware_args, &block); end
  def using?(middleware); end
end
