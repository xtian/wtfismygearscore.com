# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: strong
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/secure_headers/all/secure_headers.rbi
#
# secure_headers-6.1.1
module SecureHeaders
  def append_content_security_policy_directives(additions); end
  def content_security_policy_script_nonce; end
  def content_security_policy_style_nonce; end
  def opt_out_of_header(header_key); end
  def override_content_security_policy_directives(additions); end
  def override_x_frame_options(value); end
  def self.append_content_security_policy_directives(request, additions, target = nil); end
  def self.config_and_target(request, target); end
  def self.config_for(request, prevent_dup = nil); end
  def self.content_security_policy_nonce(request, script_or_style); end
  def self.content_security_policy_script_nonce(request); end
  def self.content_security_policy_style_nonce(request); end
  def self.guess_target(config); end
  def self.header_hash_for(request); end
  def self.opt_out_of_all_protection(request); end
  def self.opt_out_of_header(request, header_key); end
  def self.override_content_security_policy_directives(request, additions, target = nil); end
  def self.override_secure_headers_request_config(request, config); end
  def self.override_x_frame_options(request, value); end
  def self.raise_on_unknown_target(target); end
  def self.use_content_security_policy_named_append(request, name); end
  def self.use_secure_headers_override(request, name); end
  def use_content_security_policy_named_append(name); end
  def use_secure_headers_override(name); end
end
module SecureHeaders::HashHelper
  def hash_source(inline_script, digest = nil); end
end
class SecureHeaders::CookiesConfig
  def config; end
  def initialize(config); end
  def is_hash?(obj); end
  def is_true_or_opt_out?(obj); end
  def validate!; end
  def validate_config!; end
  def validate_exclusive_use_of_hash_constraints!(conf, attribute); end
  def validate_exclusive_use_of_samesite_enforcement!(attribute); end
  def validate_hash_or_true_or_opt_out!(attribute); end
  def validate_httponly_config!; end
  def validate_samesite_boolean_config!; end
  def validate_samesite_config!; end
  def validate_samesite_hash_config!; end
  def validate_secure_config!; end
end
class SecureHeaders::CookiesConfigError < StandardError
end
class SecureHeaders::Cookie
  def already_flagged?(attribute); end
  def conditionally_flag?(configuration); end
  def config; end
  def flag_cookie?(attribute); end
  def flag_samesite?; end
  def flag_samesite_enforcement?(mode); end
  def flag_samesite_lax?; end
  def flag_samesite_strict?; end
  def httponly?; end
  def initialize(cookie, config); end
  def parse(cookie); end
  def parsed_cookie; end
  def raw_cookie; end
  def samesite?; end
  def samesite_cookie; end
  def secure?; end
  def self.validate_config!(config); end
  def to_s; end
end
module SecureHeaders::PolicyManagement
  def self.included(base); end
end
module SecureHeaders::PolicyManagement::ClassMethods
  def boolean?(source_expression); end
  def combine_policies(original, additions); end
  def ensure_array_of_strings!(directive, value); end
  def ensure_valid_directive!(directive); end
  def ensure_valid_sources!(directive, source_expression); end
  def list_directive?(directive); end
  def make_header(config); end
  def media_type_list?(directive); end
  def merge_policy_additions(original, additions); end
  def populate_fetch_source_with_default!(original, additions); end
  def require_sri_for_list?(directive); end
  def sandbox_list?(directive); end
  def source_list?(directive); end
  def ua_to_variation(user_agent); end
  def validate_config!(config); end
  def validate_directive!(directive, value); end
  def validate_media_type_expression!(directive, media_type_expression); end
  def validate_require_sri_source_expression!(directive, require_sri_for_expression); end
  def validate_sandbox_expression!(directive, sandbox_token_expression); end
  def validate_source_expression!(directive, source_expression); end
end
module SecureHeaders::DynamicConfig
  def ==(o); end
  def [](directive); end
  def []=(directive, value); end
  def append(new_hash); end
  def directive_value(directive); end
  def dup; end
  def from_hash(hash); end
  def initialize(hash); end
  def merge!(new_hash); end
  def merge(new_hash); end
  def opt_out?; end
  def self.included(base); end
  def to_h; end
  def update_directive(directive, value); end
  def write_attribute(attr, value); end
end
class SecureHeaders::ContentSecurityPolicyConfigError < StandardError
end
class SecureHeaders::ContentSecurityPolicyConfig
  def base_uri; end
  def base_uri=(value); end
  def block_all_mixed_content; end
  def block_all_mixed_content=(value); end
  def child_src; end
  def child_src=(value); end
  def connect_src; end
  def connect_src=(value); end
  def default_src; end
  def default_src=(value); end
  def disable_nonce_backwards_compatibility; end
  def disable_nonce_backwards_compatibility=(value); end
  def font_src; end
  def font_src=(value); end
  def form_action; end
  def form_action=(value); end
  def frame_ancestors; end
  def frame_ancestors=(value); end
  def frame_src; end
  def frame_src=(value); end
  def img_src; end
  def img_src=(value); end
  def make_report_only; end
  def manifest_src; end
  def manifest_src=(value); end
  def media_src; end
  def media_src=(value); end
  def navigate_to; end
  def navigate_to=(value); end
  def object_src; end
  def object_src=(value); end
  def plugin_types; end
  def plugin_types=(value); end
  def prefetch_src; end
  def prefetch_src=(value); end
  def preserve_schemes; end
  def preserve_schemes=(value); end
  def report_only; end
  def report_only=(value); end
  def report_only?; end
  def report_uri; end
  def report_uri=(value); end
  def require_sri_for; end
  def require_sri_for=(value); end
  def sandbox; end
  def sandbox=(value); end
  def script_nonce; end
  def script_nonce=(value); end
  def script_src; end
  def script_src=(value); end
  def self.attrs; end
  def style_nonce; end
  def style_nonce=(value); end
  def style_src; end
  def style_src=(value); end
  def upgrade_insecure_requests; end
  def upgrade_insecure_requests=(value); end
  def worker_src; end
  def worker_src=(value); end
  include SecureHeaders::DynamicConfig
end
class SecureHeaders::ContentSecurityPolicyReportOnlyConfig < SecureHeaders::ContentSecurityPolicyConfig
  def make_report_only; end
  def report_only?; end
end
class SecureHeaders::ContentSecurityPolicy
  def append_nonce(source_list, nonce); end
  def build_media_type_list_directive(directive); end
  def build_sandbox_list_directive(directive); end
  def build_source_list_directive(directive); end
  def build_value; end
  def dedup_source_list(sources); end
  def directives; end
  def initialize(config = nil); end
  def keep_wildcard_sources(source_list); end
  def minify_source_list(directive, source_list); end
  def name; end
  def populate_nonces(directive, source_list); end
  def reject_all_values_if_none(source_list); end
  def strip_source_schemes(source_list); end
  def symbol_to_hyphen_case(sym); end
  def value; end
  extend SecureHeaders::PolicyManagement::ClassMethods
  include SecureHeaders::PolicyManagement
end
class SecureHeaders::XFOConfigError < StandardError
end
class SecureHeaders::XFrameOptions
  def self.make_header(config = nil, user_agent = nil); end
  def self.validate_config!(config); end
end
class SecureHeaders::STSConfigError < StandardError
end
class SecureHeaders::StrictTransportSecurity
  def self.make_header(config = nil, user_agent = nil); end
  def self.validate_config!(config); end
end
class SecureHeaders::XXssProtectionConfigError < StandardError
end
class SecureHeaders::XXssProtection
  def self.make_header(config = nil, user_agent = nil); end
  def self.validate_config!(config); end
end
class SecureHeaders::XContentTypeOptionsConfigError < StandardError
end
class SecureHeaders::XContentTypeOptions
  def self.make_header(config = nil, user_agent = nil); end
  def self.validate_config!(config); end
end
class SecureHeaders::XDOConfigError < StandardError
end
class SecureHeaders::XDownloadOptions
  def self.make_header(config = nil, user_agent = nil); end
  def self.validate_config!(config); end
end
class SecureHeaders::XPCDPConfigError < StandardError
end
class SecureHeaders::XPermittedCrossDomainPolicies
  def self.make_header(config = nil, user_agent = nil); end
  def self.validate_config!(config); end
end
class SecureHeaders::ReferrerPolicyConfigError < StandardError
end
class SecureHeaders::ReferrerPolicy
  def self.make_header(config = nil, user_agent = nil); end
  def self.validate_config!(config); end
end
class SecureHeaders::ClearSiteDataConfigError < StandardError
end
class SecureHeaders::ClearSiteData
  def self.make_header(config = nil, user_agent = nil); end
  def self.make_header_value(types); end
  def self.validate_config!(config); end
end
class SecureHeaders::ExpectCertificateTransparencyConfigError < StandardError
end
class SecureHeaders::ExpectCertificateTransparency
  def enforced_directive; end
  def initialize(config); end
  def max_age_directive; end
  def report_uri_directive; end
  def self.make_header(config, use_agent = nil); end
  def self.validate_config!(config); end
  def value; end
end
class SecureHeaders::Middleware
  def call(env); end
  def flag_cookies!(headers, config); end
  def initialize(app); end
  def override_secure(env, config = nil); end
  def scheme(env); end
end
class SecureHeaders::Railtie < Rails::Railtie
end
module SecureHeaders::ViewHelpers
  def _content_security_policy_nonce(type); end
  def content_security_policy_nonce(type); end
  def content_security_policy_script_nonce; end
  def content_security_policy_style_nonce; end
  def extract_options(args); end
  def hashed_javascript_tag(raise_error_on_unrecognized_hash = nil, &block); end
  def hashed_style_tag(raise_error_on_unrecognized_hash = nil, &block); end
  def hashed_tag(type, directive, hashes, raise_error_on_unrecognized_hash, block); end
  def nonced_javascript_include_tag(*args, &block); end
  def nonced_javascript_pack_tag(*args, &block); end
  def nonced_javascript_tag(content_or_options = nil, &block); end
  def nonced_style_tag(content_or_options = nil, &block); end
  def nonced_stylesheet_link_tag(*args, &block); end
  def nonced_stylesheet_pack_tag(*args, &block); end
  def nonced_tag(type, content_or_options, block); end
  def unexpected_hash_error_message(file_path, content, hash_value); end
  include SecureHeaders::HashHelper
end
class SecureHeaders::ViewHelpers::UnexpectedHashedScriptException < StandardError
end
class SecureHeaders::Configuration
  def clear_site_data; end
  def clear_site_data=(arg0); end
  def cookies; end
  def cookies=(arg0); end
  def csp; end
  def csp=(new_csp); end
  def csp_report_only; end
  def csp_report_only=(new_csp); end
  def dup; end
  def expect_certificate_transparency; end
  def expect_certificate_transparency=(arg0); end
  def generate_headers; end
  def hsts; end
  def hsts=(arg0); end
  def initialize(&block); end
  def opt_out(header); end
  def override(name = nil, &block); end
  def referrer_policy; end
  def referrer_policy=(arg0); end
  def secure_cookies=(secure_cookies); end
  def self.configure(&block); end
  def self.deep_copy(config); end
  def self.deep_copy_if_hash(value); end
  def self.default(&block); end
  def self.default_config; end
  def self.dup; end
  def self.named_append(name, &block); end
  def self.named_appends(name); end
  def self.override(name, &block); end
  def self.overrides(name); end
  def update_x_frame_options(value); end
  def validate_config!; end
  def x_content_type_options; end
  def x_content_type_options=(arg0); end
  def x_download_options; end
  def x_download_options=(arg0); end
  def x_frame_options; end
  def x_frame_options=(arg0); end
  def x_permitted_cross_domain_policies; end
  def x_permitted_cross_domain_policies=(arg0); end
  def x_xss_protection; end
  def x_xss_protection=(arg0); end
end
class SecureHeaders::Configuration::AlreadyConfiguredError < StandardError
end
class SecureHeaders::Configuration::NotYetConfiguredError < StandardError
end
class SecureHeaders::Configuration::IllegalPolicyModificationError < StandardError
end
class SecureHeaders::NoOpHeaderConfig
  def [](*args); end
  def []=(*args); end
  def boom(*args); end
  def dup; end
  def keys(*args); end
  def opt_out?; end
  def self.allocate; end
  def self.instance; end
  def self.new(*arg0); end
  def to_h; end
  extend Singleton::SingletonClassMethods
  include Singleton
end
