# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: strong
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/scenic/all/scenic.rbi
#
# scenic-1.5.1
module Scenic
  def self.configuration; end
  def self.configuration=(config); end
  def self.configure; end
  def self.database; end
  def self.load; end
end
class Scenic::Configuration
  def database; end
  def database=(arg0); end
  def initialize; end
end
module Scenic::Adapters
end
class Scenic::Adapters::Postgres
  def connectable; end
  def connection; end
  def create_materialized_view(name, sql_definition, no_data: nil); end
  def create_view(name, sql_definition); end
  def drop_materialized_view(name); end
  def drop_view(name); end
  def execute(*args, &block); end
  def initialize(connectable = nil); end
  def quote_table_name(*args, &block); end
  def raise_unless_concurrent_refresh_supported; end
  def raise_unless_materialized_views_supported; end
  def refresh_dependencies_for(name); end
  def refresh_materialized_view(name, concurrently: nil, cascade: nil); end
  def replace_view(name, sql_definition); end
  def update_materialized_view(name, sql_definition, no_data: nil); end
  def update_view(name, sql_definition); end
  def views; end
end
class Scenic::Adapters::Postgres::Connection < SimpleDelegator
  def postgresql_version; end
  def supports_concurrent_refreshes?; end
  def supports_materialized_views?; end
  def undecorated_connection; end
end
class Scenic::Adapters::Postgres::MaterializedViewsNotSupportedError < StandardError
  def initialize; end
end
class Scenic::Adapters::Postgres::ConcurrentRefreshesNotSupportedError < StandardError
  def initialize; end
end
class Scenic::Adapters::Postgres::IndexReapplication
  def connection; end
  def initialize(connection:, speaker: nil); end
  def on(name); end
  def say(message); end
  def speaker; end
  def try_index_create(index); end
  def with_savepoint(name); end
end
class Scenic::Adapters::Postgres::Indexes
  def connection; end
  def index_from_database(result); end
  def indexes_on(name); end
  def initialize(connection:); end
  def on(name); end
  def quote_table_name(*args, &block); end
end
class Scenic::Adapters::Postgres::Views
  def all; end
  def connection; end
  def initialize(connection); end
  def pg_identifier(name); end
  def pgconn; end
  def to_scenic_view(result); end
  def views_from_postgres; end
end
class Scenic::Adapters::Postgres::RefreshDependencies
  def adapter; end
  def call; end
  def connection; end
  def dependencies; end
  def initialize(name, adapter, connection); end
  def name; end
  def self.call(name, adapter, connection); end
end
class Scenic::Adapters::Postgres::RefreshDependencies::DependencyParser
  def initialize(raw_dependencies, view_to_refresh); end
  def parse_to_hash(dependency_rows); end
  def raw_dependencies; end
  def to_sorted_array; end
  def tsort(hash); end
  def view_to_refresh; end
end
module Scenic::CommandRecorder
  def create_view(*args); end
  def drop_view(*args); end
  def invert_create_view(args); end
  def invert_drop_view(args); end
  def invert_replace_view(args); end
  def invert_update_view(args); end
  def perform_scenic_inversion(method, args); end
  def replace_view(*args); end
  def update_view(*args); end
end
class Scenic::CommandRecorder::StatementArguments
  def initialize(args); end
  def invert_version; end
  def options; end
  def options_for_revert; end
  def revert_to_version; end
  def to_a; end
  def version; end
  def view; end
end
class Scenic::Definition
  def filename; end
  def full_path; end
  def initialize(name, version); end
  def path; end
  def to_sql; end
  def version; end
end
class Scenic::Railtie < Rails::Railtie
end
module Scenic::SchemaDumper
  def dumpable_views_in_database; end
  def tables(stream); end
  def views(stream); end
end
module Scenic::Statements
  def create_view(name, version: nil, sql_definition: nil, materialized: nil); end
  def definition(name, version); end
  def drop_view(name, revert_to_version: nil, materialized: nil); end
  def no_data(materialized); end
  def replace_view(name, version: nil, revert_to_version: nil, materialized: nil); end
  def update_view(name, version: nil, sql_definition: nil, revert_to_version: nil, materialized: nil); end
end
class Scenic::View
  def ==(other); end
  def definition; end
  def initialize(name:, definition:, materialized:); end
  def materialized; end
  def name; end
  def to_schema; end
end
class Scenic::Index
  def definition; end
  def index_name; end
  def initialize(object_name:, index_name:, definition:); end
  def object_name; end
end
