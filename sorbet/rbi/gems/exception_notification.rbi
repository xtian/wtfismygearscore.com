# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: strong
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/exception_notification/all/exception_notification.rbi
#
# exception_notification-4.3.0
module ExceptionNotifier
  def error_grouping; end
  def error_grouping=(obj); end
  def error_grouping_cache; end
  def error_grouping_cache=(obj); end
  def error_grouping_period; end
  def error_grouping_period=(obj); end
  def ignored_exceptions; end
  def ignored_exceptions=(obj); end
  def logger; end
  def logger=(obj); end
  def notification_trigger; end
  def notification_trigger=(obj); end
  def self.add_notifier(name, notifier_or_options); end
  def self.clear_ignore_conditions!; end
  def self.create_and_register_notifier(name, options); end
  def self.error_grouping; end
  def self.error_grouping=(obj); end
  def self.error_grouping_cache; end
  def self.error_grouping_cache=(obj); end
  def self.error_grouping_period; end
  def self.error_grouping_period=(obj); end
  def self.fire_notification(notifier_name, exception, options, &block); end
  def self.ignore_if(&block); end
  def self.ignored?(exception, options); end
  def self.ignored_exception?(ignore_array, exception); end
  def self.ignored_exceptions; end
  def self.ignored_exceptions=(obj); end
  def self.logger; end
  def self.logger=(obj); end
  def self.notification_trigger; end
  def self.notification_trigger=(obj); end
  def self.notifiers; end
  def self.notify_exception(exception, options = nil, &block); end
  def self.register_exception_notifier(name, notifier_or_options); end
  def self.registered_exception_notifier(name); end
  def self.testing_mode!; end
  def self.testing_mode; end
  def self.testing_mode=(obj); end
  def self.unregister_exception_notifier(name); end
  def testing_mode; end
  def testing_mode=(obj); end
  extend ExceptionNotifier::ErrorGrouping::ClassMethods
  include ExceptionNotifier::ErrorGrouping
end
class ExceptionNotifier::BaseNotifier
  def _post_callback(exception, options, message, message_opts); end
  def _pre_callback(exception, options, message, message_opts); end
  def base_options; end
  def base_options=(arg0); end
  def initialize(options = nil); end
  def send_notice(exception, options, message, message_opts = nil); end
end
module ExceptionNotifier::ErrorGrouping
  extend ActiveSupport::Concern
end
module ExceptionNotifier::ErrorGrouping::ClassMethods
  def error_count(error_key); end
  def fallback_cache_store; end
  def group_error!(exception, options); end
  def save_error_count(error_key, count); end
  def send_notification?(exception, count); end
end
class ExceptionNotifier::UndefinedNotifierError < StandardError
end
module ExceptionNotification
  def self.configure; end
end
class ExceptionNotification::Rack
  def call(env); end
  def from_crawler(env, ignored_crawlers); end
  def initialize(app, options = nil); end
end
class ExceptionNotification::Rack::CascadePassException < Exception
end
