# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: strong
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/fabrication/all/fabrication.rbi
#
# fabrication-2.20.2
module Fabrication
  def self.clear_definitions; end
  def self.configure(&block); end
  def self.manager; end
  def self.schematics; end
end
class Fabrication::Railtie < Rails::Railtie
end
module Fabrication::Schematic
end
module Fabrication::Generator
end
class Object < BasicObject
  def Fabricate(name, overrides = nil, &block); end
  def Fabricator(name, options = nil, &block); end
end
module FabricationMethods
  def fabrications; end
end
class Fabrication::Schematic::Manager
  def [](name); end
  def build_stack; end
  def clear; end
  def create_stack; end
  def empty?; end
  def freeze; end
  def initializing?; end
  def load_definitions; end
  def preinitialize; end
  def prevent_recursion!; end
  def raise_if_registered(name); end
  def register(name, options, &block); end
  def schematics; end
  def self.allocate; end
  def self.instance; end
  def self.new(*arg0); end
  def store(name, aliases, options, &block); end
  def to_params_stack; end
  extend Singleton::SingletonClassMethods
  include Singleton
end
class Fabrication::Generator::Base
  def _attributes; end
  def _instance; end
  def _instance=(arg0); end
  def _klass; end
  def _klass=(arg0); end
  def _transient_attributes; end
  def _transient_attributes=(arg0); end
  def build(attributes = nil, callbacks = nil); end
  def build_instance; end
  def build_instance_with_constructor_override(callback); end
  def build_instance_with_init_callback(callback); end
  def create(attributes = nil, callbacks = nil); end
  def execute_callbacks(callbacks); end
  def initialize(klass); end
  def method_missing(method_name, *args, &block); end
  def persist; end
  def process_attributes(attributes); end
  def self.supports?(_klass); end
  def set_attributes; end
  def to_hash(attributes = nil, callbacks = nil); end
  def to_params(attributes = nil); end
end
class Fabrication::Generator::ActiveRecord < Fabrication::Generator::Base
  def build_instance; end
  def self.supports?(klass); end
end
class Fabrication::Generator::DataMapper < Fabrication::Generator::Base
  def build_instance; end
  def persist; end
  def self.supports?(klass); end
end
class Fabrication::Generator::Sequel < Fabrication::Generator::Base
  def initialize(klass); end
  def load_instance_hooks; end
  def persist; end
  def self.supports?(klass); end
  def set_attributes; end
end
class Fabrication::Generator::Mongoid < Fabrication::Generator::Base
  def build_instance; end
  def self.supports?(klass); end
end
class Fabrication::Schematic::Definition
  def append_or_update_attribute(attribute_name, value, params = nil, &block); end
  def attribute(name); end
  def attributes; end
  def attributes=(arg0); end
  def block; end
  def block=(arg0); end
  def build(overrides = nil, &block); end
  def callbacks; end
  def callbacks=(arg0); end
  def fabricate(overrides = nil, &block); end
  def generate_value(name, params); end
  def generator; end
  def initialize(name, options = nil, &block); end
  def initialize_copy(original); end
  def klass; end
  def load_body; end
  def loaded?; end
  def merge(overrides = nil, &block); end
  def name; end
  def name=(arg0); end
  def options; end
  def options=(arg0); end
  def parent; end
  def process_block(&block); end
  def sorted_attributes; end
  def to_attributes(overrides = nil, &block); end
  def to_params(overrides = nil, &block); end
end
